!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
$(TARGET)	Makefile	/^$(TARGET): $(OBJ)$/;"	t
%.o	Makefile	/^%.o: %.cpp $(DEPS)$/;"	t
CURRENT_CONDITIONS_DISPLAY	CurrentConditionsDisplay.h	/^#define CURRENT_CONDITIONS_DISPLAY$/;"	d
CXX	Makefile	/^CXX = clang++$/;"	m
CurrentConditionsDisplay	CurrentConditionsDisplay.h	/^		CurrentConditionsDisplay(Subject *sbj) : observable(sbj)$/;"	f	class:CurrentConditionsDisplay
CurrentConditionsDisplay	CurrentConditionsDisplay.h	/^class CurrentConditionsDisplay : public Observer, public DisplayElement {$/;"	c
DISPLAY_ELEMENT	DisplayElement.h	/^#define DISPLAY_ELEMENT$/;"	d
DisplayElement	DisplayElement.h	/^class DisplayElement {$/;"	c
FORCAST_DISPLAY_H	ForcastDisplay.h	/^#define FORCAST_DISPLAY_H$/;"	d
ForcastDisplay	ForcastDisplay.h	/^		ForcastDisplay(Subject *sbj) : observable(sbj) { observable->addObserver(this); }$/;"	f	class:ForcastDisplay
ForcastDisplay	ForcastDisplay.h	/^class ForcastDisplay : public Observer, DisplayElement {$/;"	c
HEAT_INDEX_H	HeatIndex.h	/^#define HEAT_INDEX_H$/;"	d
HeatIndex	HeatIndex.h	/^		HeatIndex(Subject *wd) : weatherData(wd) { weatherData->addObserver(this); }$/;"	f	class:HeatIndex
HeatIndex	HeatIndex.h	/^class HeatIndex : public Observer, DisplayElement {$/;"	c
OBJ	Makefile	/^OBJ = $(TARGET).o$/;"	m
OBSERVER_H	Observer.h	/^#define OBSERVER_H$/;"	d
Observer	Observer.h	/^class Observer {$/;"	c
STATISTICS_DISPLAY_H	StatisticsDisplay.h	/^#define STATISTICS_DISPLAY_H$/;"	d
SUBJECT_H	Subject.h	/^#define SUBJECT_H$/;"	d
StatisticsDisplay	StatisticsDisplay.h	/^		StatisticsDisplay(Subject *wd) : weatherData(wd)$/;"	f	class:StatisticsDisplay
StatisticsDisplay	StatisticsDisplay.h	/^class StatisticsDisplay : public Observer, public DisplayElement {$/;"	c
Subject	Subject.h	/^class Subject {$/;"	c
TARGET	Makefile	/^TARGET = weatherStation$/;"	m
WEATHER_DATA_H	WeatherData.h	/^#define WEATHER_DATA_H$/;"	d
WeatherData	WeatherData.h	/^class WeatherData : public Subject {$/;"	c
addObserver	Subject.h	/^		void addObserver(Observer *o) { observers.push_back(o); }$/;"	f	class:Subject	typeref:typename:void
changed	Subject.h	/^		bool changed = false;$/;"	m	class:Subject	typeref:typename:bool
clean	Makefile	/^clean:$/;"	t
computeHeatIndex	HeatIndex.h	/^computeHeatIndex(const double &t, const double &rh) {$/;"	f	typeref:typename:double
currentPressure	ForcastDisplay.h	/^		double currentPressure = 29.92f;$/;"	m	class:ForcastDisplay	typeref:typename:double
deleteObserver	Subject.h	/^Subject::deleteObserver(Observer *o) {$/;"	f	class:Subject	typeref:typename:void
display	CurrentConditionsDisplay.h	/^CurrentConditionsDisplay::display() const {$/;"	f	class:CurrentConditionsDisplay	typeref:typename:void
display	ForcastDisplay.h	/^ForcastDisplay::display() const$/;"	f	class:ForcastDisplay	typeref:typename:void
display	HeatIndex.h	/^HeatIndex::display() const {$/;"	f	class:HeatIndex	typeref:typename:void
display	StatisticsDisplay.h	/^StatisticsDisplay::display() const$/;"	f	class:StatisticsDisplay	typeref:typename:void
getHumidity	WeatherData.h	/^		double getHumidity() const { return humidity; }$/;"	f	class:WeatherData	typeref:typename:double
getPressure	WeatherData.h	/^		double getPressure() const { return pressure; }$/;"	f	class:WeatherData	typeref:typename:double
getTemperature	WeatherData.h	/^		double getTemperature() const { return temperature; }$/;"	f	class:WeatherData	typeref:typename:double
heatIndex	HeatIndex.h	/^		double heatIndex = 0.0f; $/;"	m	class:HeatIndex	typeref:typename:double
humidity	CurrentConditionsDisplay.h	/^		double humidity = 0.0f;$/;"	m	class:CurrentConditionsDisplay	typeref:typename:double
humidity	WeatherData.h	/^		double humidity = 0.0f;$/;"	m	class:WeatherData	typeref:typename:double
main	weatherStation.cpp	/^int main()$/;"	f	typeref:typename:int
maxTemp	StatisticsDisplay.h	/^		double maxTemp = 0.0f;$/;"	m	class:StatisticsDisplay	typeref:typename:double
measurementsChanged	WeatherData.h	/^WeatherData::measurementsChanged() {$/;"	f	class:WeatherData	typeref:typename:void
minTemp	StatisticsDisplay.h	/^		double minTemp = 200.0f;$/;"	m	class:StatisticsDisplay	typeref:typename:double
notifyObservers	Subject.h	/^Subject::notifyObservers(Observer *obs)$/;"	f	class:Subject	typeref:typename:void
numberOfReadings	StatisticsDisplay.h	/^		int numberOfReadings = 0;$/;"	m	class:StatisticsDisplay	typeref:typename:int
observable	CurrentConditionsDisplay.h	/^		Subject *observable;$/;"	m	class:CurrentConditionsDisplay	typeref:typename:Subject *
observable	ForcastDisplay.h	/^		Subject *observable = nullptr;$/;"	m	class:ForcastDisplay	typeref:typename:Subject *
observers	Subject.h	/^		std::list<Observer *> observers;$/;"	m	class:Subject	typeref:typename:std::list<Observer * >
pressure	WeatherData.h	/^		double pressure = 0.0f;$/;"	m	class:WeatherData	typeref:typename:double
prevPressure	ForcastDisplay.h	/^		double prevPressure = 0.0f;$/;"	m	class:ForcastDisplay	typeref:typename:double
setChanged	Subject.h	/^		void setChanged() { changed = true; }$/;"	f	class:Subject	typeref:typename:void
setMeasurements	WeatherData.h	/^WeatherData::setMeasurements(const double &t, const double &h, const double &p) {$/;"	f	class:WeatherData	typeref:typename:void
tempSum	StatisticsDisplay.h	/^		double tempSum = 0.0f;$/;"	m	class:StatisticsDisplay	typeref:typename:double
temperature	CurrentConditionsDisplay.h	/^		double temperature = 0.0f;$/;"	m	class:CurrentConditionsDisplay	typeref:typename:double
temperature	WeatherData.h	/^		double temperature = 0.0f;$/;"	m	class:WeatherData	typeref:typename:double
update	CurrentConditionsDisplay.h	/^CurrentConditionsDisplay::update(Subject *subj, [[maybe_unused]] Observer *obs) { \/\/ try optio/;"	f	class:CurrentConditionsDisplay	typeref:typename:void
update	ForcastDisplay.h	/^void ForcastDisplay::update(Subject *sbj, [[maybe_unused]] Observer *obs) \/\/ look into optiona/;"	f	class:ForcastDisplay	typeref:typename:void
update	HeatIndex.h	/^HeatIndex::update(Subject *sbj, [[maybe_unused]] Observer *obs) \/\/ try optional?$/;"	f	class:HeatIndex	typeref:typename:void
update	StatisticsDisplay.h	/^StatisticsDisplay::update(Subject *sbj, [[maybe_unused]] Observer *obs) \/\/ consider optional$/;"	f	class:StatisticsDisplay	typeref:typename:void
weatherData	HeatIndex.h	/^		Subject *weatherData;$/;"	m	class:HeatIndex	typeref:typename:Subject *
weatherData	StatisticsDisplay.h	/^		Subject *weatherData = nullptr;$/;"	m	class:StatisticsDisplay	typeref:typename:Subject *
