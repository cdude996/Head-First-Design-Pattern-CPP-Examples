!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
$(TARGET)	Makefile	/^$(TARGET): $(OBJ)$/;"	t
%.o	Makefile	/^%.o: %.cpp $(DEPS)$/;"	t
CXX	Makefile	/^CXX = clang++$/;"	m
DIR_OF_THIRD_PARTY	.ycm_extra_conf.py	/^DIR_OF_THIRD_PARTY = p.join( DIR_OF_THIS_SCRIPT, 'third_party' )$/;"	v
DIR_OF_THIS_SCRIPT	.ycm_extra_conf.py	/^DIR_OF_THIS_SCRIPT = p.abspath( p.dirname( __file__ ) )$/;"	v
DUCK_CALL_H	DuckCall.h	/^#define DUCK_CALL_H$/;"	d
DUCK_H	Duck.h	/^#define DUCK_H$/;"	d
Duck	Duck.h	/^class Duck {$/;"	c
DuckCall	DuckCall.h	/^		DuckCall() { quackBehavior = std::make_unique<Quack>(); }$/;"	f	class:DuckCall
DuckCall	DuckCall.h	/^class DuckCall {$/;"	c
FLY_BEHAVIOR_H	FlyBehavior.h	/^#define FLY_BEHAVIOR_H$/;"	d
FLY_NOWAY_H	FlyNoWay.h	/^#define FLY_NOWAY_H$/;"	d
FLY_ROCKET_POWERED_H	FlyRocketPowered.h	/^#define FLY_ROCKET_POWERED_H$/;"	d
FLY_WITH_WINGS_H	FlyWithWings.h	/^#define FLY_WITH_WINGS_H$/;"	d
FindCorrespondingSourceFile	.ycm_extra_conf.py	/^def FindCorrespondingSourceFile( filename ):$/;"	f
FlyBehavior	FlyBehavior.h	/^class FlyBehavior {$/;"	c
FlyNoWay	FlyNoWay.h	/^class FlyNoWay : public FlyBehavior {$/;"	c
FlyRocketPowered	FlyRocketPowered.h	/^class FlyRocketPowered : public FlyBehavior {$/;"	c
FlyWithWings	FlyWithWings.h	/^class FlyWithWings : public FlyBehavior {$/;"	c
GetStandardLibraryIndexInSysPath	.ycm_extra_conf.py	/^def GetStandardLibraryIndexInSysPath( sys_path ):$/;"	f
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
MALLARD_DUCK_H	MallardDuck.h	/^#define MALLARD_DUCK_H$/;"	d
MODEL_DUCK_H	ModelDuck.h	/^#define MODEL_DUCK_H$/;"	d
MUTEQUACK_H	MuteQuack.h	/^#define MUTEQUACK_H$/;"	d
MallardDuck	MallardDuck.h	/^MallardDuck::MallardDuck() {$/;"	f	class:MallardDuck
MallardDuck	MallardDuck.h	/^class MallardDuck : public Duck {$/;"	c
ModelDuck	ModelDuck.h	/^class ModelDuck : public Duck {$/;"	c
ModelDuck	ModelDuck.h	/^inline ModelDuck::ModelDuck() {$/;"	f	class:ModelDuck
MuteDuck	MuteDuck.h	/^MuteDuck::MuteDuck() {$/;"	f	class:MuteDuck
MuteDuck	MuteDuck.h	/^class MuteDuck : public Duck {$/;"	c
MuteQuack	MuteQuack.h	/^class MuteQuack : public QuackBehavior {$/;"	c
Mute_Duck_H	MuteDuck.h	/^#define Mute_Duck_H$/;"	d
OBJ	Makefile	/^OBJ = $(TARGET).o$/;"	m
PathToPythonUsedDuringBuild	.ycm_extra_conf.py	/^def PathToPythonUsedDuringBuild():$/;"	f
PythonSysPath	.ycm_extra_conf.py	/^def PythonSysPath( **kwargs ):$/;"	f
QUACKBEHAVIOR_H	QuackBehavior.h	/^#define QUACKBEHAVIOR_H$/;"	d
QUACK_H	Quack.h	/^#define QUACK_H$/;"	d
QUAK_MUTE_H	QuackMute.h	/^#define QUAK_MUTE_H$/;"	d
Quack	Quack.h	/^class Quack : public QuackBehavior {$/;"	c
QuackBehavior	QuackBehavior.h	/^class QuackBehavior {$/;"	c
QuackMute	QuackMute.h	/^class QuackMute : public QuackBehavior {$/;"	c
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
SQUEAK_H	Squeak.h	/^#define SQUEAK_H$/;"	d
Settings	.ycm_extra_conf.py	/^def Settings( **kwargs ):$/;"	f
Squeak	Squeak.h	/^class Squeak : public QuackBehavior {$/;"	c
TARGET	Makefile	/^TARGET = MiniDuckSimulator$/;"	m
clean	Makefile	/^clean:$/;"	t
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
display	DuckCall.h	/^		void display() const { std::cout << "I'm not a duck!\\n"; }$/;"	f	class:DuckCall	typeref:typename:void
display	MallardDuck.h	/^		void display() const override { std::cout << "I'm a real Mallard Duck\\n"; }$/;"	f	class:MallardDuck	typeref:typename:void
display	ModelDuck.h	/^		void display() const override { std::cout << "I'm a model duck"; }$/;"	f	class:ModelDuck	typeref:typename:void
display	MuteDuck.h	/^		void display() const override { std::cout << "I am a mute duck\\n"; }$/;"	f	class:MuteDuck	typeref:typename:void
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
fly	FlyNoWay.h	/^		void fly() override { std::cout << "I can't fly\\n"; }$/;"	f	class:FlyNoWay	typeref:typename:void
fly	FlyRocketPowered.h	/^		void fly() { std::cout << "I'm flying with a rocket!\\n"; }$/;"	f	class:FlyRocketPowered	typeref:typename:void
fly	FlyWithWings.h	/^		void fly() override { std::cout << "I'm flying!!\\n";}$/;"	f	class:FlyWithWings	typeref:typename:void
flyBehavior	Duck.h	/^		std::unique_ptr<FlyBehavior> flyBehavior = nullptr;$/;"	m	class:Duck	typeref:typename:std::unique_ptr<FlyBehavior>
main	MiniDuckSimulator.cpp	/^int main() {$/;"	f	typeref:typename:int
p	.ycm_extra_conf.py	/^import os.path as p$/;"	I
performFly	Duck.h	/^		void performFly() const { flyBehavior->fly(); }$/;"	f	class:Duck	typeref:typename:void
performQuack	Duck.h	/^		void performQuack() const { quackBehavior->quack(); }$/;"	f	class:Duck	typeref:typename:void
performQuack	DuckCall.h	/^		void performQuack() { quackBehavior->quack(); }$/;"	f	class:DuckCall	typeref:typename:void
quack	MuteQuack.h	/^		void quack() override { std::cout << "<< Silence >>\\n"; }$/;"	f	class:MuteQuack	typeref:typename:void
quack	Quack.h	/^		void quack() override { std::cout << "Quack\\n"; }$/;"	f	class:Quack	typeref:typename:void
quack	QuackMute.h	/^	void quack() override { std::cout << "<< Silence >>\\n"; }$/;"	f	class:QuackMute	typeref:typename:void
quack	Squeak.h	/^		void quack() override { std::cout << "Squeak"; }$/;"	f	class:Squeak	typeref:typename:void
quackBehavior	Duck.h	/^		std::unique_ptr<QuackBehavior> quackBehavior = nullptr;$/;"	m	class:Duck	typeref:typename:std::unique_ptr<QuackBehavior>
quackBehavior	DuckCall.h	/^		std::unique_ptr<QuackBehavior> quackBehavior;$/;"	m	class:DuckCall	typeref:typename:std::unique_ptr<QuackBehavior>
setFlyBehavior	Duck.h	/^		void setFlyBehavior(std::unique_ptr<FlyBehavior> fb) { flyBehavior = std::move(fb); } \/\/ pas/;"	f	class:Duck	typeref:typename:void
setQuackBehavior	Duck.h	/^		void setQuackBehavior(std::unique_ptr<QuackBehavior> qb) { quackBehavior = std::move(qb); }$/;"	f	class:Duck	typeref:typename:void
swim	Duck.h	/^		void swim() const { std::cout << "all ducks float, even decoys!\\n"; }$/;"	f	class:Duck	typeref:typename:void
